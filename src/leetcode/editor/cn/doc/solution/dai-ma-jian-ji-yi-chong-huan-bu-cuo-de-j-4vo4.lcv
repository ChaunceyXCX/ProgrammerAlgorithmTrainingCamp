[详细刷题视频合集](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)      
[刷题笔记](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)

##### 方法1.排序

- 思路：两个字符串转成数组，排序后转回字符串进行比较。
- 复杂度分析：时间复杂度`O(nlogn)`，排序采用快排，时间复杂度是nlogn，比较两字符串是否相等时间复杂度为n，`O(n)+O(nlogn)=O(nlogn)`。空间复杂度为`O(logn)`，排序需要`O(logn)`的空间，java和js字符串是不可变的，需要额外的 `O(n)`空间来拷贝字符串，我们忽略这个复杂度，这依赖不同语言实现的细节。

##### 方法2.哈希表:

- 思路：采用空间换时间的策略，准备一个数组，循环字符串s，每个元素出现一次加1，然后循环t元素，每次出现的字符减1，如果t中出现一些不在s中的字符 则返回false，所有循环结束 说明两个字符串中每个字符的数量相同
- 复杂度分析： 时间复杂度`O(n)`,n是字符串的长度，空间复杂度`O(s)`，s为字符集大小

js:

* js

```js
var isAnagram = function(s, t) {
    if (s.length !== t.length) {//长度不想等 直接返回false
        return false;
    }
    const table = new Array(26).fill(0);//大小为26的数组
    for (let i = 0; i < s.length; ++i) {//循环字符串s，每个元素出现一次加1
        table[s.codePointAt(i) - 'a'.codePointAt(0)]++;
    }
    for (let i = 0; i < t.length; ++i) {//循环t元素
        table[t.codePointAt(i) - 'a'.codePointAt(0)]--;//每次出现的字符减1
      	//如果t中出现一些字符对于s中的字符 则返回false
        if (table[t.codePointAt(i) - 'a'.codePointAt(0)] < 0) {
            return false;
        }
    }
    return true;//所有循环结束 说明两个字符串中每个字符的数量相同
}

```

java:

* java

```java
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        int[] table = new int[26];
        for (int i = 0; i < s.length(); i++) {
            table[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            table[t.charAt(i) - 'a']--;
            if (table[t.charAt(i) - 'a'] < 0) {
                return false;
            }
        }
        return true;
    }
}

```

